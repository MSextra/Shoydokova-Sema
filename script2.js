/*—Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ)*/
const state = {}; 
/*
–ø–µ—Ä–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫-—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ 
window.addEventListener('DOMContentLoaded', main);
*/
function main() {
    console.debug("call main");
    const fileInp = document.getElementById('fileInput');
    fileInp.addEventListener('change', fileInputOnChange);
    state.fileInput = fileInp;
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    state.tabs = document.getElementsByClassName("tab");
    // –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    // (—ç—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∏ –≤—Ä—É—á–Ω—É—é, –Ω–æ —Å —Ä–æ—Å—Ç–æ–º —á–∏—Å–ª–∞ –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω–µ–µ)
    const menuItems = document.getElementsByClassName("tablink");
    // const menuItems = document.querySelectorAll('nav ul li a');
    for (const item of menuItems){
        const tabId = item.getAttribute('href').substring(1);
        item.addEventListener('click', (event) => {
            event.preventDefault(); // –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
            switchToTab(tabId);
        });
    }
    state.menuItems = menuItems;
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
    state.tableEdit = document.getElementById("editTableDiv");
}
/*–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –ø–æ –∏–º–µ–Ω–∏ –≤–∫–ª–∞–¥–∫–∏*/
function switchToTab(tabName) {
    console.debug('call switchToTab');
    const tabs = state.tabs;
    for (const tab of tabs) { // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É, —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if (tab.id == tabName) {tab.style.display="block";} 
        else {tab.style.display = "none";}
    }
    // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ-—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –µ–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç
    if (tabName == 'uploadTable') {renderTableV2('table');}
    else if (tabName == 'editTable') {refreshEditTable();}
    else if (tabName == 'tableStats') {refreshStatsV2(tabName);} // —Ç—É—Ç –±—ã–ª–æ –ø—Ä–æ—â–µ —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ 2 –≤–∫–ª–∞–¥–∫–∏
    else if (tabName == 'plotStats') {refreshStatsV2(tabName);}
}
/* –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç —Ñ–∞–π–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ "–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É" */
function fileInputOnChange() {
    console.debug('call fileInputOnChange');
    const file = state.fileInput.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function (event) { // –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω
            // https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications
            const txt = event.target.result;
            state.table = parseTable(txt); // —á–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
            renderTableV2('table'); // renderTableV2 –∏—â–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏–º–µ–Ω–∏
            state.fileInput.value = ""; // —Å—Ç–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞, 
            // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        };
        reader.readAsText(file);
    }
}
/* —á–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –º–∞—Å—Å–∏–≤*/
function parseTable(txt, sep=";", linesep="\n") {
    console.debug('call parseTable');
    // —Ç—É–ø–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫–∏ —É–¥–æ–±–Ω–µ–µ, —á–µ–º –¥—É–º–∞—Ç—å, –∫–∞–∫–∏–µ –æ–Ω–∏
    const rows = txt.replace('\r\n', '\n').split(linesep);
    const table = [];
    for (const row of rows) {
        const columns = row.split(sep);
        table.push(columns);
    }
    return table;
}
/* –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤ state[tableId] */ 
function renderTableV2(tableId, showDownloadButton=true) {
    console.debug(`call renderTableV2(${tableId})`);
    const divId = tableId + 'Div'; // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ div –Ω–∞–∑–≤–∞–Ω—ã —Å–æ–æ–±—Ä–∞–∑–Ω–æ —Å –∫–ª—é—á–∞–º–∏ –≤ state
    const table = state[tableId];
    const div = document.getElementById(divId);
    if (!table) { // —Ç–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ—Ç
        div.innerHTML = '<p>‚ö†Ô∏è—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';
        console.log(`table ${tableId} not found`);
        return;
    };
    // –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    let html = '';
    if (showDownloadButton) {
    html += `<button class="buttonNormal1" onclick="downloadTableById('${tableId}', 'txt')">‚á© —Å–∫–∞—á–∞—Ç—å .txt</button>`;
    html += `<button class="buttonNormal1" onclick="downloadTableById('${tableId}', 'csv')">‚á© —Å–∫–∞—á–∞—Ç—å .csv</button>`;
    html += `<button class="buttonNormal1" onclick="downloadTableById('${tableId}', 'xls')">‚á© —Å–∫–∞—á–∞—Ç—å .xls</button>`;
    }
    html += `<table id="${tableId}"><thead>` // —Ç–µ–≥–∏ –Ω–∞—á–∞–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
    const header = table[0];
    for (const cell of header) {html += `<th>${cell}</th>`;} // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    html += "</thead><tbody>"; // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    for (const row of table.slice(1)) {
        html += "<tr>";
        for (const cell of row) {html +=`<td>${cell}</td>`;}
        html += "</tr>";
    }
    html += "</tbody></table>"; // –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ html —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    div.innerHTML = html;
}
/* —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤ state[tableId] –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞*/
function downloadTableById(tableId, format='txt', sep=';', linesep='\n'){
    console.debug(`call downloadTableById(${tableId})`);
    table = state[tableId];
    let csv = '\uFEFF'; // —Å–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å UTF-8 Byte Order Mark)
    for (const row of table) {
        for (const v of row) {
            // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏, —á—Ç–æ–±—ã csv –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
            const s = `${v}`.replace(/(\r\n|\n|\r)/gm, " ").replace(/"/g, '""');
            csv += s + sep;
        }
        csv += linesep;
    }
    if (format == 'csv') { mimetype = 'text/csv;charset=utf-8';} 
    else if (format == 'txt') {mimetype = 'text/plain;charset=utf-8';} 
    else {mimetype = 'application/octet-stream';}
    const blob = new Blob([csv], { type: mimetype}); // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ (—Ç–∏–ø–∞ –∫–∞–∫ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Ç–ø)
    const url = URL.createObjectURL(blob); // –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–µ ("–∞")
    const downloadLink = document.createElement("a");
    downloadLink.href = url;
    downloadLink.download = tableId+('.' + format);
    document.body.appendChild(downloadLink);
    downloadLink.click(); // –∫–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
    document.body.removeChild(downloadLink); // —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏ —Å—Å—ã–ª–∫—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    URL.revokeObjectURL(url);
}
/*
‚Ä¢ –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
‚ó¶ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–º–µ—é—â–∏—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π
‚ó¶ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û –∏ –æ—Ü–µ–Ω–æ–∫ —É—á–µ–Ω–∏–∫–∞
‚ó¶ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
‚ó¶ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ */
function refreshEditTable(){
    console.debug('call refreshEditTable');
    const table = state.table;
    if (!table) { // —Ç–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ—Ç
        state.tableEdit.innerHTML = '<p>‚ö†Ô∏è—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';
        console.log(`table not found`);
        return;
    };
    // –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é, –Ω–∞—á–∏–Ω–∞–µ–º —Å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π
    let html = '<button class="buttonNormal1" onclick="downloadTableById(\'table\')">‚á© —Å–∫–∞—á–∞—Ç—å</button>'
    html += '<table id="editableTable">';
    table.forEach((row, index) => { // –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ renderTableV2
        if(index == 0) {      html += '<thead><tr>';} 
        else if(index == 1) { html += `<tbody><tr id="editorRow-${index}">`;} // –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–¥–µ–ª–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ
        else {                html += `<tr id="editorRow-${index}">`;}
        row.forEach(cell => {
            if(index == 0) {  html += `<th>${cell}</th>`;} 
            else {            html += `<td>${cell}</td>`;}
        });
        if (index != 0) { // –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            html += `<td><button class="buttonEmoj" onclick="editTableDelete(${index})">üóë</button></td><td><button class="buttonEmoj" onclick="editTableEdit(${index})">üñâ</button></td></tr>`;
        } else {
            html += '<th></th><th></th></tr></thead>';
        }
    });
    html += '<td><button class="buttonNormal1" onclick="editTableAddRow()">‚úö –¥–æ–±–∞–≤–∏—Ç—å</button></td>'
    html += '</tbody>';
    html += '</table>';
    state.tableEdit.innerHTML = html;
}
/* —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã*/
function editTableDelete(idx){
    console.debug(`call editTableDelete(${idx})`);
    state.table.splice(idx, 1);
    refreshEditTable();
}
/* –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π*/
function editTableEdit(idx){
    console.debug(`call editTableEdit(${idx})`);
    const row = document.getElementById(`editorRow-${idx}`);
    const cells = row.childNodes;
    const ncells = cells.length;
    for (i=0; i < ncells -2; i++){
        const cell = cells[i];
        cell.contentEditable=true;
        cell.classList.add("editableCell");
    }
    cells[ncells-2].innerHTML = `<button class="buttonEmoj" onclick="editTableCancel(${idx})">‚úñ</button>`;
    cells[ncells-1].innerHTML = `<button class="buttonEmoj" onclick="editTableAccept(${idx})">‚úì</button>`;
}
/* –æ—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏*/
function editTableCancel(idx){
    console.debug(`call editTableCancel(${idx})`);
    refreshEditTable(); // –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –±—ã–ª–æ –±—ã –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ä—è–¥, –Ω–æ –º–Ω–µ –ª–µ–Ω—å
}
/* —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Å—Ç—Ä–æ–∫—É (—Å—á–∏—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫–∏ —Ä—è–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ state.table)*/
function editTableAccept(idx){
    console.debug(`call editTableCancel(${idx})`);
    const row = document.getElementById(`editorRow-${idx}`);
    const cells = row.childNodes;
    const rowVals = state.table[idx];
    for (i = 0; i < rowVals.length; i++) {
        rowVals[i] = cells[i].textContent;
    }
    refreshEditTable(); // –æ–ø—è—Ç—å-—Ç–∞–∫–∏, –ª–µ–Ω—å
}
/* –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –≤ state.table*/
function editTableAddRow(){
    console.debug(`call editTableAddRow()`);
    const table = state.table;
    const ncols = table[0].length;
    const newRow = Array(ncols).fill('0');
    table.push(newRow);
    refreshEditTable();
}
/*—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫-—Ä–∞—è —Ä–∏—Å—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã/–≥—Ä–∞—Ñ–∏–∫–∏ */
function refreshStatsV2(whichTab){
    console.debug(`call refreshStatsV2(${whichTab})`);
    const table = state.table;
    if (!table) {
        // –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–ø–∏—à—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        renderTableV2('tableStatsStudent');
        renderTableV2('tableStatsGroup');
        return;
    }
    const nrows = table.length;
    const colnames = table[0];
    const ncols = colnames.length;
    const groupStats = {};
    const errors = ["–Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É:"];
    // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å 3–µ–π (–∏–Ω–¥–µ–∫—Å 2) –≤ Int, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    const groupSet = new Set(); // –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø, Set —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ 1 –∫–æ–ø–∏—é –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    for (rowNo=1; rowNo<nrows; rowNo++){
        const row = table[rowNo];
        const group = row[1];
        groupSet.add(group);
        if (row.length != ncols) {
            errors.push(`—Ä—è–¥ ${row[0]} –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É ${row.length}, –Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∏—Ç ${ncols} —è—á–µ–µ–∫`);
        }
        // const grades = row.slice(2,).map(parseInt); // –º–æ–∂–Ω–æ —Ç–∞–∫, –Ω–æ —Ç–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫–∏
        for (colNo=2; colNo<ncols; colNo++){
            const s = row[colNo];
            const v = parseInt(s);
            if (v != v) { // v —ç—Ç–æ IEEE Nan, Nan != Nan –ø–æ —ç—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
                errors.push(`—Ä—è–¥ ${row[0]} –∫–æ–ª–æ–Ω–∫–∞ ${colnames[colNo]}: ${s} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º`);
            } else if ((1 > v) | (v > 5)) {
                errors.push(`—Ä—è–¥ ${row[0]} –∫–æ–ª–æ–Ω–∫–∞ ${colnames[colNo]}: –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5, –Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ ${v}`);
            }
            row[colNo]=v;
        }
    }
    if (errors.length > 1) {
        // –≤–º–µ—Å—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—ã–≤–æ–¥–∏–º –æ–±—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        state.tableStatsStudent = errors.map(msg => {return [msg, ];}); // –¥–µ–ª–∞–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–∞–±–ª–∏—Ü—É —Å 1 –∫–æ–ª–æ–Ω–∫–æ–π
        renderTableV2('tableStatsStudent');
        state.tableStatsGroup = null;
        renderTableV2('tableStatsGroup'); // –≤—ã–≤–µ–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã
        return;
    }
    const groups = [... groupSet]; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    const t2 = table.slice(1,); // –æ–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    // –∑–∞–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    const stats = [
        ['–ø—Ä–µ–¥–º–µ—Ç', ...colnames.slice(2,)], 
        ['—Å—Ä–µ–¥–Ω–µ–µ',],
        ['–º–µ–¥–∏–∞–Ω–∞',],
        ['–∫–æ–ª-–≤–æ 1',],
        ['–∫–æ–ª-–≤–æ 2', ],
        ['–∫–æ–ª-–≤–æ 3', ],
        ['–∫–æ–ª-–≤–æ 4', ],
        ['–∫–æ–ª-–≤–æ 5', ],
        ['–ø—Ä–æ—Ü–µ–Ω—Ç 1', ],
        ['–ø—Ä–æ—Ü–µ–Ω—Ç 2', ],
        ['–ø—Ä–æ—Ü–µ–Ω—Ç 3', ],
        ['–ø—Ä–æ—Ü–µ–Ω—Ç 4', ],
        ['–ø—Ä–æ—Ü–µ–Ω—Ç 5', ]
    ];
    // –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const plotDS = {labels: colnames.slice(2,), datasets: [{label: 'total', data: []}]};
    for (colNo = 2; colNo < ncols; colNo++) {
        const col = t2.map(row => {return row[colNo];}) // –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        // —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–∞–¥–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π / —Ö—ç—à–º–∞–ø –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        const avg = averageArr(col).toFixed(1);
        stats[1].push(avg);
        stats[2].push(medianArr(col));
        const counts = countGrades(col);
        for (i=0; i<5; i++) {
            stats[3+i].push(counts[i]);
            const percent = (counts[i]/col.length * 100).toFixed(1);
            stats[3+5+i].push(percent);
        }
        plotDS.datasets[0].data.push(avg);
    }
    // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–π –º—ã –≤–∫–ª–∞–¥–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É
    if (whichTab == 'tableStats') {
        state.tableStatsStudent = stats;
        renderTableV2('tableStatsStudent');
    } else if (whichTab == 'plotStats') {
        // renderBarChart('studentChart', { // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫—É—Å–æ–∫, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            // labels: ['abc', 'def', 'ghi'], 
            // datasets: [
            //     {label: 'x', data: [10, 12, 8]},
            // ]});
        renderBarChart('studentChart', plotDS);
    }

    //–ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –∫–ª–∞—Å—Å–∞–º
    const gstats = [['–ø—Ä–µ–¥–º–µ—Ç', '–∫–ª–∞—Å—Å', ...colnames.slice(2,)], ];
    const gplotDS = {labels: colnames.slice(2,), datasets: []}; // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å—é–¥–∞
    for (const group of groups){
        // –Ω–æ–≤–∞—è —Å–µ–∫—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        const gstat = [
            ['—Å—Ä–µ–¥–Ω–µ–µ',],
            ['–º–µ–¥–∏–∞–Ω–∞',],
            ['–∫–æ–ª-–≤–æ 1',],
            ['–∫–æ–ª-–≤–æ 2', ],
            ['–∫–æ–ª-–≤–æ 3', ],
            ['–∫–æ–ª-–≤–æ 4', ],
            ['–∫–æ–ª-–≤–æ 5', ],
            ['–ø—Ä–æ—Ü–µ–Ω—Ç 1', ],
            ['–ø—Ä–æ—Ü–µ–Ω—Ç 2', ],
            ['–ø—Ä–æ—Ü–µ–Ω—Ç 3', ],
            ['–ø—Ä–æ—Ü–µ–Ω—Ç 4', ],
            ['–ø—Ä–æ—Ü–µ–Ω—Ç 5', ],
        ]
        // –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        for (const row of gstat) {row.push(group);}
        // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥—Ä—É–ø–ø—É
        const gplotD = {label: group, data: []};
        gplotDS.datasets.push(gplotD);

        for (colNo = 2; colNo < ncols; colNo++) {
            const col = t2.filter(row=>{return row[1] == group;}).map(row => {return row[colNo];})
            const avg = averageArr(col).toFixed(1);
            gstat[0].push(avg);
            gstat[1].push(medianArr(col));
            const counts = countGrades(col);
            for (i=0; i<5; i++) {
                gstat[2+i].push(counts[i]);
                const percent = (counts[i]/col.length * 100).toFixed(1);
                gstat[2+5+i].push(percent);
            } 
            gplotD.data.push(avg); // –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        }
        for (const row of gstat) {gstats.push(row);} // –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã –∫ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    }
    if (whichTab == 'tableStats') {
        state.tableStatsGroup = gstats;
        renderTableV2('tableStatsGroup');
    } else if (whichTab == 'plotStats') {
        // renderBarChart('groupChart' { // –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        //     labels: ['abc', 'def', 'ghi'], 
        //     datasets: [
        //         {label: 'x', data: [10, 5, 12]},
        //         {label: 'y', data: [10, 15, 8]},
        //     ]});
        renderBarChart('groupChart', gplotDS);
    }
}
/*—Å—Ä–µ–¥–Ω–µ–µ –º–∞—Å—Å–∏–≤–∞*/
function averageArr(xs){
    if (xs.length == 0) return 0;
    return xs.reduce((a, b) => a + b, 0) / xs.length;
}
/*–º–µ–¥–∏–∞–Ω–∞ –º–∞—Å—Å–∏–≤–∞*/
function medianArr(xs) {
    if (xs.length==0) return 0;
    const xss = xs.toSorted();
    const mid = Math.floor(xss.length / 2);
    if (xss.length%2) { // –Ω–µ—á–µ—Ç–Ω–æ–µ
        return xss[mid];
    } else { // —á–µ—Ç–Ω–æ–µ
        return (xss[mid-1]+xss[mid])/2
    }
}
/*—Å—á–∏—Ç–∞–µ–º –æ—Ü–µ–Ω–∫–∏*/
function countGrades(grades) {
    const counts = Array(5).fill(0); // —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫ –æ—Ç 1 –¥–æ 5 –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (const grade of grades) {
        counts[grade-1]++;
    }
    return counts;
}
/*—Å—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ —Å canvasId*/
function renderBarChart(canvasId, data){
    const objId = canvasId + "Obj"; // –∫–ª—é—á –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—Ö–æ–¥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    if (state[objId]) { state[objId].destroy();} // –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –µ—Å—Ç—å, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –µ–≥–æ
    const canvas = document.getElementById(canvasId); // –Ω–∞—Ö–æ–¥–∏–º canvas
    const ctx = canvas.getContext('2d');
    state[objId] = new Chart(ctx, { // —Å–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ
        type: 'bar',
        data: data,
        options: {scales:{y: {beginAtZero: true}}}
    });
}
window.addEventListener('DOMContentLoaded', main);